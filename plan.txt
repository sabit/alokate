Perfect ‚Äî here‚Äôs the **complete project outline + component + API structure** for your **University Faculty Scheduler (Cloudflare-native, committee-only, visual + editable + smart suggestions)** ‚Äî **including optional enhancements**.

---

# üß≠ PROJECT OVERVIEW

**Goal:** A browser-based, offline-capable scheduler for assigning ~40 faculty members to pre-defined subjects, sections, time slots, and rooms ‚Äî with preference scoring, visual editing, conflict checking, and snapshot management.
**Audience:** ‚â§3 scheduling committee members (PIN-protected).
**Hosting:** Cloudflare Pages + Cloudflare Workers + D1 (or KV)

---

# üß© ARCHITECTURE OVERVIEW

| Layer           | Role                                       | Technology                                                    |
| --------------- | ------------------------------------------ | ------------------------------------------------------------- |
| **Frontend**    | Core UI, algorithm, visualization, editing | React (or Svelte/Solid) + TailwindCSS + D3/Canvas + IndexedDB |
| **Backend**     | Minimal API for persistence/auth           | Cloudflare Worker (REST endpoints)                            |
| **Storage**     | Small, transactional data store            | Cloudflare D1 (SQLite) or KV                                  |
| **Auth**        | Simple, PIN-based                          | Worker middleware + optional Cloudflare Access                |
| **Data Format** | Unified JSON                               | `{ config, preferences, schedule, snapshots, settings }`      |

---

# ‚öôÔ∏è FRONTEND STRUCTURE

## 1. App Shell

**Purpose:** Root component that handles routing, auth, and global state.

* `App.tsx`

  * Handles PIN entry and stores session in localStorage
  * Loads JSON data from backend or import
  * Manages offline state
  * Layout (Sidebar + Main workspace)

---

## 2. Sidebar (Navigation + Snapshots)

**Components:**

* `SidebarMenu.tsx` ‚Äì navigation: Config / Preferences / Schedule / Snapshots / Settings
* `SnapshotList.tsx` ‚Äì shows list of manual snapshots with timestamp + diff button
* `SaveSnapshotButton.tsx` ‚Äì capture current state (local + sync to server)

---

## 3. Configuration Module

**Components:**

* `ConfigTable.tsx` ‚Äì table import/edit for Subjects, Sections, Timeslots, Rooms, Buildings, Faculty
* `ConfigImporter.tsx` ‚Äì JSON/CSV upload
* `ConfigExporter.tsx` ‚Äì export unified JSON
* Validates format + relationships (e.g., each section must map to a subject)

---

## 4. Preferences Module

**Components:**

* `PreferenceMatrix.tsx` ‚Äì grid editor for faculty √ó subject, time slot, or building
* `PreferenceLegend.tsx` ‚Äì color guide (red‚Üígreen for -3‚Üí+3)
* `QuickFillTools.tsx` ‚Äì fill pattern, copy from last semester
* Stored in local IndexedDB (auto-save)

---

## 5. Scheduler Engine

**Modules (in `/engine`):**

* `optimizer.ts` ‚Äì Hungarian / heuristic optimization
* `mobilityPenalty.ts` ‚Äì cost function for building changes
* `scoring.ts` ‚Äì total weighted score calculator
* `conflictChecker.ts` ‚Äì identifies hard & soft conflicts
* `suggestions.ts` ‚Äì generates alternate faculty or swaps

**Flow:**

1. Collect config + preferences
2. Run optimizer (client-side)
3. Produce `schedule` array
4. Display results + score summary

---

## 6. Schedule Visualization

**Key Components:**

* `ScheduleGrid.tsx` ‚Äì main visualization (faculty √ó time slot grid)

  * Hover faculty ‚Üí highlight their slots
  * Hover course ‚Üí highlight all its sections
  * Conflict highlights (red outline / yellow shade)
  * Editable: click slot ‚Üí open `EditDialog`
* `EditDialog.tsx` ‚Äì reassign / swap options with suggestions
* `ConflictPanel.tsx` ‚Äì summary list of conflicts with ‚Äújump to‚Äù buttons
* `Tooltip.tsx` ‚Äì contextual info on hover
* `FilterBar.tsx` ‚Äì filter by faculty, building, subject, day

**Visualization:**

* D3 / Canvas grid for smooth rendering
* Zoom & pan for large department view
* Color scale for preference satisfaction

---

## 7. Manual Editing + Suggestions

**In `EditDialog`:**

* ‚ÄúFind available faculty‚Äù (no time conflict, positive preference)
* ‚ÄúSwap with another faculty (same time slot)‚Äù
* ‚ÄúBest replacements by total score‚Äù
* Re-run conflict check & update score delta live

---

## 8. Snapshots & Diff Viewer

**Components:**

* `SnapshotList.tsx` ‚Äì list & actions
* `SnapshotDiff.tsx` ‚Äì side-by-side comparison of two JSON states
* `ChangeHighlighter.tsx` ‚Äì animates changed slots
  **Storage:**
* Local first; synced to backend D1 on demand

---

## 9. Conflict Visualization Layer

* Integrated into `ScheduleGrid` + `ConflictPanel`
* Checks:

  * Faculty double-booking
  * Consecutive building jumps
  * Missing faculty for section
  * Over-assigned subjects
* Tooltips show reason and resolution hint

---

## 10. Settings & Enhancements

**Components:**

* `SettingsPanel.tsx`

  * Adjust global algorithm weights (mobility penalty, seniority weight, preference strength)
  * Switch dark/light mode
  * Toggle auto-validation
  * Auto-layout animation on diff compare
* `ThemeToggle.tsx`
* `SimulationPanel.tsx` ‚Äì what-if adjustments (e.g., ‚Äúremove this faculty‚Äù ‚Üí re-run optimizer)

---

# üñ•Ô∏è BACKEND (Cloudflare Worker)

### Routes

| Method              | Endpoint                                                       | Purpose |
| ------------------- | -------------------------------------------------------------- | ------- |
| `POST /auth/login`  | Verify PIN, return JWT/session                                 |         |
| `GET /data`         | Return unified JSON (config, preferences, schedule, snapshots) |         |
| `POST /data`        | Save unified JSON                                              |         |
| `POST /snapshot`    | Save named snapshot                                            |         |
| `GET /snapshot/:id` | Fetch snapshot by ID                                           |         |
| `POST /diff`        | Compare two snapshots (optional server diff)                   |         |
| `GET /settings`     | Get saved weight tuning                                        |         |
| `POST /settings`    | Save new weights                                               |         |

**Auth middleware:**

* Simple PIN check from `Authorization` header
* Optional Cloudflare Access header validation

**Storage:**

* D1 table with columns:

  * `id`, `data_json`, `snapshot_name`, `created_at`, `updated_at`

---

# üßÆ DATA FORMAT (Single JSON)

```json
{
  "config": {
    "faculty": [...],
    "subjects": [...],
    "sections": [...],
    "timeslots": [...],
    "rooms": [...],
    "buildings": [...]
  },
  "preferences": {
    "facultySubject": {...},
    "facultyTimeslot": {...},
    "facultyBuilding": {...},
    "mobility": {...}
  },
  "schedule": [...],
  "snapshots": [
    { "id": "snap_2025_01", "timestamp": "...", "data": {...} }
  ],
  "settings": {
    "weights": {
      "mobility": 0.8,
      "seniority": 1.2,
      "preference": 1.0
    },
    "theme": "dark"
  }
}
```

---

# üå± OPTIONAL ENHANCEMENTS (INCLUDED)

‚úÖ **Weighted Scoring UI:**
Slider-based controls to adjust bias between preferences, seniority, mobility.
Changes instantly recompute ranking without full reallocation.

‚úÖ **Lock Assignments:**
Checkbox beside schedule cells ‚Üí locked entries not touched on next re-run.

‚úÖ **What-if Simulator:**
Panel to temporarily remove/replace a faculty, then preview new score/conflicts.

‚úÖ **Diff Animation:**
When comparing snapshots, changed cells animate with fade/slide effect.

‚úÖ **Dark Mode:**
Toggle in settings; saved in JSON `settings.theme`.

‚úÖ **Auto-layout Animation:**
Smooth repositioning of cells when filters or snapshots change.

‚úÖ **Heatmap Overlay:**
Show satisfaction intensity (green=high match, red=low).

‚úÖ **Offline Mode:**
Works fully offline via IndexedDB + Service Worker cache.

---

# üöÄ WORKFLOW SUMMARY

1. Committee logs in with PIN.
2. Imports config JSON (subjects, faculty, etc.).
3. Enters preferences.
4. Runs scheduler (client-side).
5. Visualizes results (color-coded, hover/filters).
6. Adjusts manually (swap, edit, suggestions).
7. Saves snapshot (versioned).
8. Exports single `.faculty-scheduler.json`.
9. Optionally syncs to backend for backup.

---

Would you like me to now generate the **API contract (OpenAPI-style)** and **frontend directory structure** next ‚Äî so you can go straight into scaffolding it on Cloudflare Pages + Workers?
